variables:
  chamberlight: !input chamber_light
  print_action: !input printer_action
  print_stage: !input printer_stage
  print_status: !input printer_status
  door_sensor: !input printer_door
  pr_layer: !input print_layer
  printer_error: !input printer_errors
  hms_common: !input hms_common_errors
  hms_serious: !input hms_serious_errors
  hms_fatal: !input hms_fatal_errors
  first_layer_inspect_on: !input is_first_layer_inspect_on
  exit_finish_after_duration: !input exit_finish_after
  bright_pct: !input brightness_pct
  replicate_state_use_rgb: !input replicate_led_state_use_rgb
  replicate_state_rgb_color: !input replicate_led_state_rgb_color
  replicate_state_color_temp: !input replicate_led_state_color_temp
  replicate_state_light_effect: !input replicate_led_state_light_effect
  finish_use_rgb: !input print_finish_use_rgb
  finish_rgb_color: !input print_finish_rgb_color
  finish_color_temp: !input print_finish_color_temp
  finish_light_effect: !input print_finish_light_effect
  paused_use_rgb: !input print_paused_use_rgb
  paused_rgb_color: !input print_paused_rgb_color
  paused_color_temp: !input print_paused_color_temp
  paused_light_effect: !input print_paused_light_effect
  heatbed_heating_use_rgb: !input heatbed_preheating_use_rgb
  heatbed_heating_rgb_color: !input heatbed_preheating_rgb_color
  heatbed_heating_color_temp: !input heatbed_preheating_color_temp
  heatbed_heating_light_effect: !input heatbed_preheating_light_effect
  bed_leveling_use_rgb: !input auto_bed_leveling_use_rgb
  bed_leveling_rgb_color: !input auto_bed_leveling_rgb_color
  bed_leveling_color_temp: !input auto_bed_leveling_color_temp
  bed_leveling_preheating_light_effect: !input auto_bed_leveling_preheating_light_effect
  cleaning_nozzle_use_rgb: !input cleaning_nozzle_tip_use_rgb
  cleaning_nozzle_rgb_color: !input cleaning_nozzle_tip_rgb_color
  cleaning_nozzle_color_temp: !input cleaning_nozzle_tip_color_temp
  cleaning_nozzle_light_effect: !input cleaning_nozzle_tip_light_effect
  chamber_light_door_open: !input chamber_light_off_door_open
  front_cover_falling_use_rgb: !input pause_of_front_cover_falling_use_rgb
  front_cover_falling_rgb_color: !input pause_of_front_cover_falling_rgb_color
  front_cover_falling_color_temp: !input pause_of_front_cover_falling_color_temp
  front_cover_falling_light_effect: !input pause_of_front_cover_falling_light_effect
  serious_use_rgb: !input hms_serious_use_rgb
  serious_rgb_color: !input hms_serious_rgb_color
  serious_color_temp: !input hms_serious_color_temp
  serious_light_effect: !input hms_serious_light_effect
  fatal_use_rgb: !input hms_fatal_use_rgb
  fatal_rgb_color: !input hms_fatal_rgb_color
  fatal_color_temp: !input hms_fatal_color_temp
  fatal_light_effect: !input hms_fatal_light_effect

blueprint:
  name: Bambu Lab ESPhome Controller
  description: Control one or more ESPhome lights with Bambu 3D printer
  domain: automation
  source_url: https://github.com/greghesp/ha-bambulab/blob/main/blueprints/wled_controller.yaml
  input:

    replicate_led_state_use_rgb:
      name: Use RGB Color for Replicate Led State
      description: "Select whether to use RGB color or color temperature for replicate led state.
        Disabled=Color Temp Enabled= RGB"
      default: true
      selector:
        boolean: {}
    replicate_led_state_rgb_color:
      name: Replicate Led State RGB Color
      description: "Set the RGB color to be used for replicate led state."
      default: [0, 0, 0] 
      selector:
        color_rgb: {}
    replicate_led_state_color_temp:
      name: Replicate Led State Color Temperature
      description: "Set the color temperature to be used for replicate led state."
      default: 4000
      selector:
        number:
          min: 0
          max: 6000
          unit_of_measurement: "K"
          mode: slider
    replicate_led_state_light_effect:
      name: Replicate Led State Light Effect
      description: "Select the light effect to used for Replicate Led State."
      default: Solid
      selector:
        select:
          options:
            - Solid
            - None
            - Flicker
            - Strobe
            - Color Cycle
          mode: dropdown

    print_finish_use_rgb:
      name: Use RGB Color for Print Finish
      description: "Select whether to use RGB color or color temperature for print finish.
        Disabled=Color Temp Enabled=RGB"
      default: true
      selector:
        boolean: {}
    print_finish_rgb_color:
      name: Print Finish RGB Color
      description: "Set the RGB color to be used for print finish."
      default: [0, 255, 0] 
      selector:
        color_rgb: {}
    print_finish_color_temp:
      name: Print Finish Color Temperature
      description: "Set the color temperature to be used for print finish."
      default: 0
      selector:
        number:
          min: 0
          max: 6000
          unit_of_measurement: "K"
          mode: slider
    print_finish_light_effect:
      name: Print Finish Light Effect
      description: "Select the light effect to be used for print finish."
      default: Solid
      selector:
        select:
          options:
            - Solid
            - None
            - Flicker
            - Strobe
            - Color Cycle
          mode: dropdown
    exit_finish_after:
      name: Exit Finish After
      description: "Time to wait after print finishes to turn back to white"
      default: 
        minutes: 5
      selector:
        duration: {}

    print_paused_use_rgb:
      name: Use RGB Color for Paused State
      description: "Select whether to use RGB color or color temperature for the paused state.
        Disabled=Color Temp, Enabled=RGB"
      default: true
      selector:
        boolean: {}
    print_paused_rgb_color:
      name: Paused State RGB Color
      description: "Set the RGB color to be used for the paused state."
      default: [0, 0, 255]  # Example default for red
      selector:
        color_rgb: {}
    print_paused_color_temp:
      name: Paused State Color Temperature
      description: "Set the color temperature to be used for the paused state."
      default: 0
      selector:
        number:
          min: 0
          max: 6000
          unit_of_measurement: "K"
          mode: slider
    print_paused_light_effect:
      name: Paused State Light Effect
      description: "Select the light effect to be used for the paused state."
      default: Solid
      selector:
        select:
          options:
            - Solid
            - None
            - Flicker
            - Strobe
            - Color Cycle
          mode: dropdown

    heatbed_preheating_use_rgb:
      name: Use RGB Color for Heatbed Preheating State
      description: "Select whether to use RGB color or color temperature for the heatbed preheating state.
        Disabled=Color Temp, Enabled=RGB"
      default: true
      selector:
        boolean: {}
    heatbed_preheating_rgb_color:
      name: Heatbed Preheating State RGB Color
      description: "Set the RGB color to be used for the heatbed preheating state."
      default: [255, 169, 0] 
      selector:
        color_rgb: {}
    heatbed_preheating_color_temp:
      name: Heatbed Preheating State Color Temperature
      description: "Set the color temperature to be used for the heatbed preheating state."
      default: 0
      selector:
        number:
          min: 0
          max: 6000
          unit_of_measurement: "K"
          mode: slider
    heatbed_preheating_light_effect:
      name: Heatbed Preheating State Light Effect
      description: "Select the light effect to be used for the heatbed preheating state."
      default: Solid
      selector:
        select:
          options:
            - Solid
            - None
            - Flicker
            - Strobe
            - Color Cycle
          mode: dropdown

    auto_bed_leveling_use_rgb:
      name: Use RGB Color for Auto Bed Leveling State
      description: "Select whether to use RGB color or color temperature for the auto bed leveling state. 
        Disabled=Color Temp, Enabled=RGB"
      default: true
      selector:
        boolean: {}
    auto_bed_leveling_rgb_color:
      name: Auto Bed Leveling State RGB Color
      description: "Set the RGB color to be used for the auto bed leveling state."
      default: [0, 255, 255] 
      selector:
        color_rgb: {}
    auto_bed_leveling_color_temp:
      name: Auto Bed Leveling State Color Temperature
      description: "Set the color temperature to be used for the auto bed leveling state."
      default: 0
      selector:
        number:
          min: 0
          max: 6000
          unit_of_measurement: "K"
          mode: slider
    auto_bed_leveling_preheating_light_effect:
      name: Auto Bed Leveling State Light Effect
      description: "Select the light effect to be used for the auto bed leveling state."
      default: Solid
      selector:
        select:
          options:
            - Solid
            - None
            - Flicker
            - Strobe
            - Color Cycle
          mode: dropdown

    cleaning_nozzle_tip_use_rgb:
      name: Use RGB Color for Cleaning Nozzle Tip State
      description: "Select whether to use RGB color or color temperature for the cleaning nozzle tip state. 
        Disabled=Color Temp, Enabled=RGB"
      default: true
      selector:
        boolean: {}
    cleaning_nozzle_tip_rgb_color:
      name: Cleaning Nozzle Tip State RGB Color
      description: "Set the RGB color to be used for the cleaning nozzle tip state."
      default: [0, 0, 0] 
      selector:
        color_rgb: {}
    cleaning_nozzle_tip_color_temp:
      name: Cleaning Nozzle Tip State Color Temperature
      description: "Set the color temperature to be used for the cleaning nozzle tip state."
      default: 0
      selector:
        number:
          min: 0
          max: 6000
          unit_of_measurement: "K"
          mode: slider
    cleaning_nozzle_tip_light_effect:
      name: Cleaning Nozzle Tip State Light Effect
      description: "Select the light effect to be used for the cleaning nozzle tip state."
      default: Solid
      selector:
        select:
          options:
            - Solid
            - None
            - Flicker
            - Strobe
            - Color Cycle
          mode: dropdown

    pause_of_front_cover_falling_use_rgb:
      name: Use RGB Color for Pause of Front Cover Falling State
      description: "Select whether to use RGB color or color temperature for the pause of front cover falling state. 
        Disabled=Color Temp, Enabled=RGB"
      default: true
      selector:
        boolean: {}
    pause_of_front_cover_falling_rgb_color:
      name: Pause of Front Cover Falling State RGB Color
      description: "Set the RGB color to be used for the pause of front cover falling state."
      default: [255, 0, 0] 
      selector:
        color_rgb: {}
    pause_of_front_cover_falling_color_temp:
      name: Pause of Front Cover Falling State Color Temperature
      description: "Set the color temperature to be used for the pause of front cover falling state."
      default: 0
      selector:
        number:
          min: 0
          max: 6000
          unit_of_measurement: "K"
          mode: slider
    pause_of_front_cover_falling_light_effect:
      name: Pause of Front Cover Falling State Light Effect
      description: "Select the light effect to be used for the pause of front cover falling state."
      default: Solid
      selector:
        select:
          options:
            - Solid
            - None
            - Flicker
            - Strobe
            - Color Cycle
          mode: dropdown

    hms_serious_use_rgb:
      name: Use RGB Color for HMS Serious Error State
      description: "Select whether to use RGB color or color temperature for the hms serious error state. 
        Disabled=Color Temp, Enabled=RGB"
      default: true
      selector:
        boolean: {}
    hms_serious_rgb_color:
      name: HMS Serious Error State RGB Color
      description: "Set the RGB color to be used for the hms serious error state."
      default: [255, 0, 0] 
      selector:
        color_rgb: {}
    hms_serious_color_temp:
      name: HMS Serious Error State Color Temperature
      description: "Set the color temperature to be used for the hms serious error state."
      default: 0
      selector:
        number:
          min: 0
          max: 6000
          unit_of_measurement: "K"
          mode: slider
    hms_serious_light_effect:
      name: HMS Serious Error State Light Effect
      description: "Select the light effect to be used for the hms serious error state."
      default: Solid
      selector:
        select:
          options:
            - Solid
            - None
            - Flicker
            - Strobe
            - Color Cycle
          mode: dropdown

    hms_fatal_use_rgb:
      name: Use RGB Color for HMS Fatal Error State
      description: "Select whether to use RGB color or color temperature for the hms fatal error state. 
        Disabled=Color Temp, Enabled=RGB"
      default: true
      selector:
        boolean: {}
    hms_fatal_rgb_color:
      name: HMS Fatal Error State RGB Color
      description: "Set the RGB color to be used for the hms fatal error state."
      default: [255, 0, 0] 
      selector:
        color_rgb: {}
    hms_fatal_color_temp:
      name: HMS SFatal Error State Color Temperature
      description: "Set the color temperature to be used for the hms fatal error state."
      default: 0
      selector:
        number:
          min: 0
          max: 6000
          unit_of_measurement: "K"
          mode: slider
    hms_fatal_light_effect:
      name: HMS Fatal Error State Light Effect
      description: "Select the light effect to be used for the hms fatal error state."
      default: Solid
      selector:
        select:
          options:
            - Solid
            - None
            - Flicker
            - Strobe
            - Color Cycle
          mode: dropdown

    printer_action:
      name: Current Action of your Bambu Lab Printer
      description: "The printer action sensor from the integration.
        NodeRed Integration: sensor.<model>_<printer_name>print_action."
      selector:
        entity:
          filter:
          - domain:
            - sensor
            integration: mqtt
          multiple: false
    printer_stage:
      name: Current Stage of your Bambu Lab Printer
      description: "The printer current stage sensor from the integration.
        NodeRed Integration: sensor.<model>_<printer_name>_stage."
      selector:
        entity:
          filter:
          - domain:
            - sensor
            integration: mqtt
          multiple: false
    printer_status:
      name: Current Status of your Bambu Lab Printer
      description: "The printer current stage sensor from the integration.
        NodeRed Integration: sensor.<model>_<printer_name>_print_status."
      selector:
        entity:
          filter:
          - domain:
            - sensor
            integration: mqtt
          multiple: false
    chamber_light:
      name: Chamber Light of your Bambu Lab Printer
      description: "The printer chamber light sensor from the integration.
        NodeRed Integration: sensor.<model>_<printer_name>_chamber_light."
      selector:
        entity:
          filter:
          - domain:
            - light
            integration: mqtt
          multiple: false
    printer_door:
      name: Printer Door of your Bambu Lab Printer
      description: "The printer door sensor from the integration.
        NodeRed Integration: sensor.<model>_<printer_name>_door."
      default: null  # Optional field, default is null
      selector:
        entity:
          filter:
          - domain:
            - sensor
            integration: mqtt
          multiple: false
    print_layer:
      name: Print Layer of your Bambu Lab Printer
      description: "The print layer number sensor from the integration.
        NodeRed Integration: sensor.<model>_<printer_name>_layer_num."
      selector:
        entity:
          filter:
          - domain:
            - sensor
            integration: mqtt
          multiple: false
    is_first_layer_inspect_on:
      name: Is First Layer Inspection enabled sensor of your Bambu Lab Printer
      description: "First Layer Inspection status sensor from the integration.
        NodeRed Integration: sensor.<model>_<printer_name>_first_layer_inspection."
      selector:
        entity:
          filter:
          - domain:
            - sensor
            integration: mqtt
          multiple: false
    printer_errors:
      name: Print Error Sensor
      description: "The print error sensor from the integration. Not any of the HMS sensors!
        NodeRed Integration: sensor.<model>_<printer_name>_print_error."
      selector:
        entity:
          filter:
            domain: sensor
            integration: mqtt
    hms_common_errors:
      name: HMS Common Error Sensor
      description: "The hms common error sensor from the integration.
        NodeRed Integration: sensor.<model>_<printer_name>_hms_common."
      selector:
        entity:
          filter:
            domain: sensor
            integration: mqtt
    hms_serious_errors:
      name: HMS Serious Error Sensor
      description: "The hms serious error sensor from the integration.
        NodeRed Integration: sensor.<model>_<printer_name>_hms_serious."
      selector:
        entity:
          filter:
            domain: sensor
            integration: mqtt
    hms_fatal_errors:
      name: HMS Fatal Error Sensor
      description: "The hms fatal error sensor from the integration.
        NodeRed Integration: sensor.<model>_<printer_name>_hms_fatal."
      selector:
        entity:
          filter:
            domain: sensor
            integration: mqtt
    esphome_lights:
      name: ESPhome Light devices
      description: "Select the ESPhome light devices you wish to control."
      selector:
        device:
          filter:
            integration: esphome
          multiple: true

    brightness_pct:
      name: Brightness Percentage
      description: "Brightness level for the ESPhome light, ranging from 0 to 100%."
      default: 100
      selector:
        number:
          min: 0
          max: 100
          step: 5
          unit_of_measurement: '%'
          mode: slider
    chamber_light_off_door_open:
      name: Turn ESPhome light on when Door is open
      description: "Enable this to turn on ESPhome light on when Door is open, when chamber light is off."
      default: true
      selector:
        boolean: {}
alias: Bambu Lab ESPhome Controller
description: ''
trigger:
- platform: state
  entity_id:
  - !input chamber_light
  - !input printer_action
  - !input printer_stage
  - !input printer_status
  - !input printer_door
  - !input print_layer
  - !input printer_errors
  - !input hms_common_errors
  - !input hms_serious_errors
  - !input hms_fatal_errors
  - !input is_first_layer_inspect_on
  alias: When printer stage, action or chamber light state changes
condition: []
action:
- if:
  - condition: state
    state: 'on'
    alias: chamber light is on
    entity_id: !input chamber_light
  - condition: not
    conditions:
    - condition: state
      entity_id: !input printer_stage
      state: Scanning bed surface
      alias: Scanning Bed Surface
    - condition: state
      entity_id: !input printer_stage
      state: Calibrating extrusion
      alias: Calibrating Extrusion
    - condition: state
      entity_id: !input printer_stage
      state: Calibrating extrusion flow
      alias: Calibrating Extrusion Flow
    - condition: state
      entity_id: !input printer_action
      state: offline
      alias: Printer is off
    - condition: template
      value_template: >
        {{ is_state(first_layer_inspect_on, 'ON') and
            state_attr(hms_common, 'HMS_0c00_0300_0003_000b Description') == "Inspecting the first layer: please wait a moment." and
            (states(hms_common) | int) >= 1 and
            (states(pr_layer) | int) == 2 }}
      alias: Inspecting the first layer and state >= 1
    alias: And Lidar is NOT on
  then:

  - choose:
    - conditions:
        - condition: template
          value_template: "{{ replicate_state_use_rgb }}"
      sequence:
        - service: light.turn_on
          data:
            rgb_color: "{{ replicate_state_rgb_color }}"
            brightness_pct: "{{ bright_pct }}"
            effect: "{{ replicate_state_light_effect }}"
          target:
            device_id: !input esphome_lights
          alias: Turn ESPhome light to RGB
    default:
      - service: light.turn_on
        data:
          kelvin: "{{ replicate_state_color_temp }}"
          brightness_pct: "{{ bright_pct }}"
          effect: "{{ replicate_state_light_effect }}"
        target:
          device_id: !input esphome_lights
        alias: Turn ESPhome light to Color Temp

  - choose:
    - conditions:
      - condition: or
        conditions:
        - condition: state
          entity_id: !input printer_action
          state: Paused due to filament runout
        - condition: state
          entity_id: !input printer_action
          state: Paused due to nozzle temperature malfunction
        - condition: state
          entity_id: !input printer_action
          state: Paused due to heat bed temperature malfunction
        - condition: template
          value_template: "{{ states(hms_serious) | int >= 1 }}"
        - condition: template
          value_template: "{{ states(hms_fatal) | int >= 1 }}"
      sequence:
      - service: light.turn_on
        data:
          rgbww_color:
          - 255
          - 0
          - 0
          - 0
          - 0
          brightness_pct: "{{ bright_pct }}"
          effect: None
        target:
          device_id: !input esphome_lights
        alias: Turn on ESPhome to red

  - choose:
    - conditions:
        - condition: template
          value_template: "{{ states(print_action) == 'Pause of front cover falling' }}"
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ front_cover_falling_use_rgb }}"
              sequence:
                - service: light.turn_on
                  data:
                    rgb_color: "{{ front_cover_falling_rgb_color }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ front_cover_falling_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to RGB
            - conditions:
                - condition: template
                  value_template: "{{ not front_cover_falling_use_rgb }}"
              sequence:
                - service: light.turn_on
                  data:
                    kelvin: "{{ front_cover_falling_color_temp }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ front_cover_falling_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to Color Temp
    alias: Handle Pause of front cover falling Stage

    #alias: Do we need to set color to red?

  - choose:
    - conditions:
      - condition: template
        value_template: "{{ trigger.from_state.state == 'RUNNING' and trigger.to_state.state == 'FINISH' }}"
        alias: Status changed from RUNNING to FINISH
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ finish_use_rgb }}"
              sequence:
                - service: light.turn_on
                  data:
                    rgb_color: "{{ finish_rgb_color }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ finish_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to RGB

            - conditions:
                - condition: template
                  value_template: "{{ not finish_use_rgb }}"
              sequence:
                - service: light.turn_on
                  data:
                    kelvin: "{{ finish_color_temp }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ finish_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to Color Temp

        #alias: Turn on ESPhome to green
        
        - wait_template: "{{ is_state(door_sensor, 'open') }}"
          timeout: "{{ exit_finish_after_duration }}"
        
        - choose:
          - conditions:
            - condition: template
              value_template: "{{ is_state(door_sensor, 'open') }}"
            - condition: template
              value_template: "{{ not is_state(printer_status, 'FINISH') }}"
            sequence:
            - choose:
              - conditions:
                - condition: template
                  value_template: "{{ replicate_state_use_rgb }}"
                sequence:
                - service: light.turn_on
                  data:
                    rgb_color: "{{ replicate_state_rgb_color }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ replicate_state_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to RGB
              default:
              - service: light.turn_on
                data:
                  kelvin: "{{ replicate_state_color_temp }}"
                  brightness_pct: "{{ bright_pct }}"
                  effect: "{{ replicate_state_light_effect }}"
                target:
                  device_id: !input esphome_lights
                alias: Turn ESPhome light to Color Temp
              
          default: #default if door isn's opened
            - choose:
              - conditions:
                - condition: template
                  value_template: "{{ replicate_state_use_rgb }}"
                sequence:
                - service: light.turn_on
                  data:
                    rgb_color: "{{ replicate_state_rgb_color }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ replicate_state_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to RGB
              default:
              - service: light.turn_on
                data:
                  kelvin: "{{ replicate_state_color_temp }}"
                  brightness_pct: "{{ bright_pct }}"
                  effect: "{{ replicate_state_light_effect }}"
                target:
                  device_id: !input esphome_lights
                alias: Turn ESPhome light to Color Temp
          
    #alias: Do we need to set color to green?

  - choose:
    - conditions:
        - condition: template
          value_template: "{{ states(print_stage) == 'Auto bed leveling' }}"
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ bed_leveling_use_rgb }}"
              sequence:
                - service: light.turn_on
                  data:
                    rgb_color: "{{ bed_leveling_rgb_color }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ bed_leveling_preheating_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to RGB
            - conditions:
                - condition: template
                  value_template: "{{ not bed_leveling_use_rgb }}"
              sequence:
                - service: light.turn_on
                  data:
                    kelvin: "{{ bed_leveling_color_temp }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ bed_leveling_preheating_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to Color Temp
    #alias: Do we need to set color to blue?

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ is_state(print_status, 'PAUSE') and
                state_attr(printer_error, 'code') not in ['7008011', '7008006', '3008004'] }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ paused_use_rgb }}"
                sequence:
                  - service: light.turn_on
                    data:
                      rgb_color: "{{ paused_rgb_color }}"
                      brightness_pct: "{{ bright_pct }}"
                      effect: "{{ paused_light_effect }}"
                    target:
                      device_id: !input esphome_lights
                    alias: Turn ESPhome light to PAUSED RGB
              - conditions:
                  - condition: template
                    value_template: "{{ not paused_use_rgb }}"
                sequence:
                  - service: light.turn_on
                    data:
                      kelvin: "{{ paused_color_temp }}"
                      brightness_pct: "{{ bright_pct }}"
                      effect: "{{ paused_light_effect }}"
                    target:
                      device_id: !input esphome_lights
                    alias: Turn ESPhome light to PAUSED Color Temp
          - wait_template: "{{ not is_state(print_status, 'PAUSE') or is_state(door_sensor, 'open') }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ replicate_state_use_rgb }}"
                sequence:
                  - service: light.turn_on
                    data:
                      rgb_color: "{{ replicate_state_rgb_color }}"
                      brightness_pct: "{{ bright_pct }}"
                      effect: "{{ replicate_state_light_effect }}"
                    target:
                      device_id: !input esphome_lights
                    alias: Turn ESPhome light to Replicate RGB
              - conditions:
                  - condition: template
                    value_template: "{{ not replicate_state_use_rgb }}"
                sequence:
                  - service: light.turn_on
                    data:
                      kelvin: "{{ replicate_state_color_temp }}"
                      brightness_pct: "{{ bright_pct }}"
                      effect: "{{ replicate_state_light_effect }}"
                    target:
                      device_id: !input esphome_lights
                    alias: Turn ESPhome light to Replicate Color Temp

  - choose:
    - conditions:
        - condition: template
          value_template: "{{ states(print_stage) == 'Cleaning nozzle tip' }}"
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ cleaning_nozzle_use_rgb }}"
              sequence:
                - service: light.turn_on
                  data:
                    rgb_color: "{{ cleaning_nozzle_rgb_color }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ cleaning_nozzle_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to RGB
            - conditions:
                - condition: template
                  value_template: "{{ not cleaning_nozzle_use_rgb }}"
              sequence:
                - service: light.turn_on
                  data:
                    kelvin: "{{ cleaning_nozzle_color_temp }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ cleaning_nozzle_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to Color Temp
    alias: Handle Cleaning Nozzle Tip Stage

  - choose:
    - conditions:
        - condition: or
          conditions:
            - condition: state
              entity_id: !input printer_stage
              state: 'Heating hotend'
            - condition: template
              value_template: "{{ states(print_stage) == 'Heatbed preheating' }}"
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ heatbed_heating_use_rgb }}"
              sequence:
                - service: light.turn_on
                  data:
                    rgb_color: "{{ heatbed_heating_rgb_color }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ heatbed_heating_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to RGB
            - conditions:
                - condition: template
                  value_template: "{{ not heatbed_heating_use_rgb }}"
              sequence:
                - service: light.turn_on
                  data:
                    kelvin: "{{ finish_color_temp }}"
                    brightness_pct: "{{ bright_pct }}"
                    effect: "{{ heatbed_heating_light_effect }}"
                  target:
                    device_id: !input esphome_lights
                  alias: Turn ESPhome light to Color Temp
    alias: Handle Heatbed Preheating or Heating hotend

    #alias: Do we need to set color to yellow?

  else:
  - service: light.turn_off
    data: {}
    target:
      device_id: !input esphome_lights
    alias: Turn ESPhome light off

- if:
    - condition: template
      value_template: "{{ chamber_light_door_open }}"
    - condition: state
      entity_id: !input chamber_light
      state: 'off'
      alias: chamber light is off
    - condition: state
      entity_id: !input printer_door
      state: 'open'
      alias: printer door open
  then:
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ replicate_state_use_rgb }}"
          sequence:
            - service: light.turn_on
              data:
                rgb_color: "{{ replicate_state_rgb_color }}"
                brightness_pct: "{{ bright_pct }}"
                effect: "{{ replicate_state_light_effect }}"
              target:
                device_id: !input esphome_lights
              alias: Turn ESPhome light to RGB
        - conditions:
            - condition: template
              value_template: "{{ not replicate_state_use_rgb }}"
          sequence:
            - service: light.turn_on
              data:
                kelvin: "{{ replicate_state_color_temp }}"
                brightness_pct: "{{ bright_pct }}"
                effect: "{{ replicate_state_light_effect }}"
              target:
                device_id: !input esphome_lights
              alias: Turn ESPhome light to Color Temp



mode: single
